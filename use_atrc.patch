diff --git a/Tools/Scripts/webkitpy/benchmark_runner/browser_driver/osx_browser_driver.py b/Tools/Scripts/webkitpy/benchmark_runner/browser_driver/osx_browser_driver.py
index eed39f38d054..5fc974eed766 100644
--- a/Tools/Scripts/webkitpy/benchmark_runner/browser_driver/osx_browser_driver.py
+++ b/Tools/Scripts/webkitpy/benchmark_runner/browser_driver/osx_browser_driver.py
@@ -46,38 +46,39 @@ class OSXBrowserDriver(BrowserDriver):
     def profile(self, output_path, profile_filename, profiling_interval, trace_type='profile', timeout=300):
         trace_process = None
         additional_trace_arguments = {
-            'full': ['--type=full'],
-            'profile': ['--type=profile'],
+            'full': ['--Logging:enable-signposts', '--Logging:enable-logs'],
+            'lite': ['--Logging:enable-signposts', '--omit', 'CLPC', '--Logging:enable-logs', '--plan', 'lite'],
+            'profile': ['--Logging:enable-signposts', '--Logging:enable-logs', '--plan', 'profile', '--omit', 'CLPC', '--unsafe', '--kdebug-filter-exclude', 'C0x03,S0x0701,S0x210b,S0x2111,S0x2112,S0x2B31'],
+            'profile-clpc': ['--Logging:enable-signposts', '--Logging:enable-logs', '--plan', 'profile', '--unsafe', '--kdebug-filter-include', 'S0x0140,C0x32', '--kdebug-filter-exclude', 'C0x03,S0x0701,S0x210b,S0x2111,S0x2112,S0x2B31']
         }
         if trace_type not in additional_trace_arguments:
             _log.error('`{}` is not a valid type of trace. Defaulting to `profile`.'.format(trace_type))
             trace_type = 'profile'
         try:
             _log.info('Gathering traces')
-            _log.info('If passwordless sudo is not enabled, you may see a prompt for your host machine\'s admin password.')
-            trace_command = ['sudo', 'ktrace', 'artrace', '-o', os.path.join(output_path, profile_filename + '.ktrace')]
+            trace_command = ['sudo', 'trace', 'record', os.path.join(output_path, profile_filename + '.atrc')]
             trace_command += additional_trace_arguments[trace_type]
             if profiling_interval:
-                trace_command += ['-i', profiling_interval]
-            _log.info('Running ktrace command: {}'.format(trace_command))
+                trace_command += ['--profiling-interval', profiling_interval]
+            _log.info('Running trace command: {}'.format(trace_command))
             trace_process = subprocess.Popen(trace_command)
-            time.sleep(5)  # Wait a few seconds for `ktrace` process to start
+            time.sleep(5) # Wait a few seconds for `trace` process to start
             yield
         except Exception as error:
-            raise Exception('Failed to start ktrace. Error: {}'.format(error))
+            raise Exception('Failed to start trace. Error: {}'.format(error))
         finally:
             if not trace_process:
                 return
             try:
-                subprocess.call(['sudo', 'pkill', '-2', 'ktrace'])
-                _log.info('Stopping ktrace task.')
+                subprocess.call(['sudo', 'pkill', '-2', 'trace'])
+                _log.info('Stopping trace task.')
                 with Timeout(timeout):
                     trace_process.wait()
             except Exception as error:
-                _log.error('Failed to quit ktrace.')
+                _log.error('Failed to quit trace.')
             finally:
-                _log.info('Killing ktrace task.')
-                subprocess.call(['sudo', 'pkill', '-9', 'ktrace'])
+                _log.info('Killing trace task.')
+                subprocess.call(['sudo', 'pkill', '-9', 'trace'])
 
     def _save_screenshot_to_path(self, output_directory, filename):
         jpg_image_path = os.path.join(output_directory, filename)
